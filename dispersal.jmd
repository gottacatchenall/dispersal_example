---
    title: "DynamicGrids.jl and Dispersal.jl example"
---

In this example we simulate the dynamics of an invasive species
dispersing across a patchy landscape using `Dispersal.jl`, a library
for simulating dispersal processes, built on top of `DynamicGrids.jl`.

For this example, we will build a simulation model where the dynamics
of a species is described by three separate processes: (1) Growth as
a function of an arbitrary environmental variable, (2) Local
dispersal (fewer than 5 cells) is density-dependent, meaning
individuals are more likely to disperse when the location they are
born in is "crowded", and (3) Random long-range (greater than 5
cells) dispersal events occur with a fixed probability.

To do this we use one of the built-in models (_rules_ in DG.jl parlence) in `Dispersal.jl`
(`JumpDispersal`, for long-rate dispersal), and then define custom
rules using `DynamicGrids.jl` for density-dependent dispersal and
environment-mediated growth.

## Running `julia` and loading packages

Lets start by loading the packages we will use in this example.
```julia
using DynamicGrids, Dispersal
using NeutralLandscapes
using SimpleSDMLayers
using Plots
using ColorSchemes
using Random
```

We'll now use set a random seed for sake of replicability
```julia
Random.seed!(2)
```

To create a virtual patchy landscape we will use a landscape generator
from `NeutralLandscapes.jl`called `DiamondSquare`.

```julia

dims = (400, 400)
patches = convert(
    Matrix{Int32},
    broadcast(x -> x < 0.3 || x > 0.8, rand(DiamondSquare(0.9), dims...)),
)
heatmap(patches)

```

### A virtual environmental variable

Because one of our proposed models of dynamics involves species growth
changing in response to an environmental variable, now we simulate a
virtual environmental variable for our patches.

```julia
totalenv = rand(DiamondSquare(0.7), dims...)
env = mask(SimpleSDMPredictor(patches), SimpleSDMPredictor(totalenv))
plot(env, aspectratio=1, frame=:box, cbtitle="environmental variable")
```


## Defining a custom density-dependent dispersal rule

Now we turn to defining our custom models.

Let's define a density-dependent model of dispersal, where the probability
of dispersal is a function of the number of individuals present in their
current location (`N`), a base intrinsic probability of dispersal `p`,
a strength of density-dependence `α`, and a carrying capacity `K`.

First we'll define this behaviour in a function

```julia
dispersalprobability(N, p, α, K) = p - 0.5 + 1/(1+exp(-α*N/K));
```

Now let's visualize this `dispersalprobability` function to get a
better sense of how dispersal probability changes with density.

```julia
nvec = 0:0.01:200
plot(
    xlim = (0, 200),
    ylim = (0, 1),
    frame = :box,
    xlabel = "abundance (N)",
    ylabel = "dispersal probability",
)
plot!(nvec, dispersalprobability.(nvec, 0.1, 0.5, 100), label = "α=0.5")
plot!(nvec, dispersalprobability.(nvec, 0.1, 1, 100), label = "α=1")
plot!(nvec, dispersalprobability.(nvec, 0.1, 3, 100), label = "α=3")
```

### Defining the implementation of density-dependent dispersal

To implement this model as a `DynamicGrids` rule, we first define a struct
which holds its parameters. 
```julia
struct DensityDependentDispersal{R,W,P,A,C,N,KT} <: SetNeighborhoodRule{R,W}
    baseprobability::P # base local dispersal probability
    α::A # strength of density density_dependence
    K::C # carrying capacity
    neighborhood::N # dispersal.jl neighboorhood
    kernel::KT  # dispersal.jl kernel
end
```

The second and final part of implementing our custom model is writing the
`applyrule!` function to describe how this rule affects any given
location from one timestep to the next. I'm going to spare some of the details for the sake of brevity.

```julia
function DynamicGrids.applyrule!(
    data,
    rule::DensityDependentDispersal{R,W},
    N,
    I,
) where {R,W}
    isnothing(N) && return nothing
    N > zero(N) || return 0

    α, K, p = rule.α, rule.K, rule.baseprobability

    rand() < dispersalprobability(N, p, α, K) || return N
    sum = zero(N)
    for (offset, k) in zip(offsets(rule.kernel), kernel(rule.kernel))
        @inbounds propagules = N * k
        @inbounds add!(data[W], propagules, I .+ offset...)
        sum += propagules
    end
    @inbounds sub!(data[W], sum, I...)
    return N - sum
end

```


## Defining a custom environmental-mediated growth rule

Similar to the density-dependent dispersal rule, we now implement growth
as a function of the environmental variable as a custom rule.

For now I'm skipping over the some of the details of implementation
(e.g. why we use `SetNeighboorhoodRule` vs. `SetCellRule` as
supertypes, etc.). In this code block we define the type and a
constructor for it.

```julia
struct EnvironmentalMediatedLogisticGrowth{R,W,L,C,E,S,F} <: SetCellRule{R,W}
    λ::L
    K::C
    envgrid::E
    σ::S
    envfunction ::F
end
EnvironmentalMediatedLogisticGrowth(
    λ,
    grid;
    K = 200,
    σ = 0.2,
    f = (x, σ) -> exp((-(0.5 - x) * σ)^2),
) = EnvironmentalMediatedLogisticGrowth(λ, K, grid, σ, f)
```

and here we define the implentation of how `EnvironmentalMediatedLogisticGrowth`
affects the value of one cell from on timestep to the next.

```julia

function DynamicGrids.applyrule!(data, rule::EnvironmentalMediatedLogisticGrowth, N, I)
    isnothing(N) && return nothing
    N > zero(N) || return zero(N)
    λ, K, σ, envlayer = rule.λ, rule.K, rule.σ, rule.envgrid
    env = envlayer[I...]

    isnothing(env) && return nothing

    Δt = 0.0001
    fitness = rule.envfunction(env, σ)
    realizedgrowthrate = fitness * λ * (1 / Δt)

    if realizedgrowthrate > zero(realizedgrowthrate)
        return @fastmath (N * K) / (N + (K - N) * exp(-realizedgrowthrate))
    else
        return @fastmath N * exp(realizedgrowthrate)
    end
end

```


## Running the model

Now that we've defined our custom rules, we can actually build the model.

First we'll define the values of the important parameters for each of
the rules we use.

### Setup
```julia
localdispersalprob = 0.01
density_dependence = 3
carrying_capacity = 100
mean_intrisic_growth_rate = 3
environment_selection_strength = 0.1
long_range_dispersal_probability = 0.005
long_range_dispersal_distance = 150
dispersalneighborhood = VonNeumann(2)
```

Next we construct the each of the rules using their constructors

```julia

localdispersal = DensityDependentDispersal(
    localdispersalprob,
    density_dependence,
    carrying_capacity,
    dispersalneighborhood,
    DispersalKernel(neighborhood = dispersalneighborhood),
)
jumpdispersal =
    JumpDispersal(long_range_dispersal_probability, long_range_dispersal_distance)
localgrowth = EnvironmentalMediatedLogisticGrowth(
    mean_intrisic_growth_rate,
    env;
    σ = environment_selection_strength,
    K = carrying_capacity,
)

```

and finally we combine them

```julia
rules = Ruleset(localgrowth, localdispersal, jumpdispersal)
```

### initial condition

For any given simulation and any set of rules, `DynamicGrids` requires
an initial condition.

Here, we'll imagine we are simulating the dispersal of an invasive species.
We define an initial condition where there is an initial introduction
of 10 individuals on the left side of our landscape.

```julia
init = zeros(Float32, size(patches))
init[190:200,1] .= 100; # start invasion from left
```

### Run the model!

Now we finally run the model. To visualize that our model is working
we'll use a `GifOutput`. 

```julia
cs = ColorSchemes.Greens_7
patchmask = Bool.(patches)[end:-1:1, 1:end]

# setup gif output 
output = GifOutput(
    init[end:-1:1, 1:end],
    filename = "./dispersal.gif",
    mask = patchmask,
    scheme = cs,
    tspan = 1:500,
    fps = 25,
    minval = 0,
    maxval = 5,
)

sim!(output, rules)

```

![output gif](./dispersal.gif)
